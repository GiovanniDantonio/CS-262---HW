syntax = "proto3";

package distributed_chat;

// The main service interface for client interactions
service ChatService {
  // Account Management
  rpc Register (UserCredentials) returns (Response);
  rpc Login (UserCredentials) returns (LoginResponse);
  rpc Logout (Username) returns (Response);
  rpc DeleteAccount (Username) returns (Response);
  rpc ListAccounts (AccountListRequest) returns (AccountListResponse);

  // Messaging
  rpc SendMessage (Message) returns (Response);
  rpc GetMessages (MessageRequest) returns (MessageList);
  rpc DeleteMessages (DeleteMessageRequest) returns (Response);
  rpc MarkAsRead (MarkAsReadRequest) returns (Response);
  
  // Real-time updates
  rpc StreamMessages (Username) returns (stream Message);
}

// Service interface for server-to-server replication
service ReplicationService {
  // Leader election related endpoints
  rpc RequestVote (VoteRequest) returns (VoteResponse);
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse);
  
  // Data replication
  rpc SyncData (SyncRequest) returns (SyncResponse);
  rpc GetState (GetStateRequest) returns (StateResponse);
  
  // Dynamic membership changes
  rpc AddServer (AddServerRequest) returns (AddServerResponse);
  rpc CatchupServer (CatchupRequest) returns (CatchupResponse);
  rpc PromoteServer (PromoteServerRequest) returns (PromoteServerResponse);
}

// Basic message types
message UserCredentials {
  string username = 1;
  string password = 2;
}

message Username {
  string username = 1;
}

message Response {
  bool success = 1;
  string message = 2;
}

message LoginResponse {
  bool success = 1;
  string message = 2;
  int32 unread_count = 3;
}

message Account {
  string username = 1;
  string created_at = 2;
  string last_login = 3;
  bool online = 4;
}

message AccountListRequest {
  string pattern = 1;
  int32 page = 2;
  int32 per_page = 3;
}

message AccountListResponse {
  repeated Account accounts = 1;
  int32 page = 2;
  int32 per_page = 3;
}

message Message {
  int64 id = 1;
  string sender = 2;
  string recipient = 3;
  string content = 4;
  string timestamp = 5;
  bool read = 6;
}

message MessageRequest {
  string username = 1;
  int32 count = 2;
}

message MessageList {
  repeated Message messages = 1;
}

message DeleteMessageRequest {
  string username = 1;
  repeated int64 message_ids = 2;
}

message MarkAsReadRequest {
  string username = 1;
  repeated int64 message_ids = 2;
}

// Consensus protocol messages
message VoteRequest {
  int32 term = 1;
  string candidate_id = 2;
  int64 last_log_index = 3;
  int32 last_log_term = 4;
}

message VoteResponse {
  int32 term = 1;
  bool vote_granted = 2;
}

message LogEntry {
  int32 term = 1;
  int64 index = 2;
  bytes data = 3;  // Serialized operation
  string command_type = 4;  // Type of command (e.g., "SEND_MESSAGE", "REGISTER", etc.)
}

message AppendEntriesRequest {
  int32 term = 1;
  string leader_id = 2;
  int64 prev_log_index = 3;
  int32 prev_log_term = 4;
  repeated LogEntry entries = 5;
  int64 leader_commit = 6;
}

message AppendEntriesResponse {
  int32 term = 1;
  bool success = 2;
  int64 match_index = 3;  // For faster updates
}

message SyncRequest {
  int64 from_index = 1;
  int64 to_index = 2;
}

message SyncResponse {
  repeated LogEntry entries = 1;
  bool success = 2;
}

message GetStateRequest {
  bool include_log_entries = 1;
  int64 from_log_index = 2;  // Only used if include_log_entries is true
}

message StateResponse {
  int32 current_term = 1;
  string voted_for = 2;
  int64 commit_index = 3;
  int64 last_applied = 4;
  repeated LogEntry log_entries = 5;  // Only populated if requested
  bool success = 6;
}

// Dynamic membership change messages
message AddServerRequest {
  string server_id = 1;
  string server_address = 2;
}

message AddServerResponse {
  bool success = 1;
  string message = 2;
  string leader_id = 3;
  string leader_address = 4;
}

message CatchupRequest {
  string server_id = 1;
  int64 last_log_index = 2;
}

message CatchupResponse {
  bool success = 1;
  string message = 2;
  repeated LogEntry entries = 3;
  int64 leader_commit = 4;
}

message PromoteServerRequest {
  string server_id = 1;
}

message PromoteServerResponse {
  bool success = 1;
  string message = 2;
}
