# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

<<<<<<< Updated upstream
<<<<<<< Updated upstream
from distributed_chat import distributed_chat_pb2 as distributed__chat_dot_distributed__chat__pb2
=======
import distributed_chat_pb2 as distributed__chat__pb2
>>>>>>> Stashed changes

GRPC_GENERATED_VERSION = '1.71.0'
=======
import distributed_chat_pb2 as distributed__chat__pb2

GRPC_GENERATED_VERSION = '1.70.0'
>>>>>>> Stashed changes
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
<<<<<<< Updated upstream
<<<<<<< Updated upstream
        + f' but the generated code in distributed_chat/distributed_chat_pb2_grpc.py depends on'
=======
        + f' but the generated code in distributed_chat_pb2_grpc.py depends on'
>>>>>>> Stashed changes
=======
        + f' but the generated code in distributed_chat_pb2_grpc.py depends on'
>>>>>>> Stashed changes
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ChatServiceStub(object):
    """The main service interface for client interactions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/distributed_chat.ChatService/Register',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
                request_serializer=distributed__chat_dot_distributed__chat__pb2.UserCredentials.SerializeToString,
                response_deserializer=distributed__chat_dot_distributed__chat__pb2.Response.FromString,
=======
                request_serializer=distributed__chat__pb2.UserCredentials.SerializeToString,
                response_deserializer=distributed__chat__pb2.Response.FromString,
>>>>>>> Stashed changes
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/distributed_chat.ChatService/Login',
                request_serializer=distributed__chat__pb2.UserCredentials.SerializeToString,
                response_deserializer=distributed__chat__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/distributed_chat.ChatService/Logout',
                request_serializer=distributed__chat__pb2.Username.SerializeToString,
                response_deserializer=distributed__chat__pb2.Response.FromString,
                _registered_method=True)
        self.DeleteAccount = channel.unary_unary(
                '/distributed_chat.ChatService/DeleteAccount',
                request_serializer=distributed__chat__pb2.Username.SerializeToString,
                response_deserializer=distributed__chat__pb2.Response.FromString,
                _registered_method=True)
        self.ListAccounts = channel.unary_unary(
                '/distributed_chat.ChatService/ListAccounts',
                request_serializer=distributed__chat__pb2.AccountListRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.AccountListResponse.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/distributed_chat.ChatService/SendMessage',
                request_serializer=distributed__chat__pb2.Message.SerializeToString,
                response_deserializer=distributed__chat__pb2.Response.FromString,
                _registered_method=True)
        self.GetMessages = channel.unary_unary(
                '/distributed_chat.ChatService/GetMessages',
                request_serializer=distributed__chat__pb2.MessageRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.MessageList.FromString,
                _registered_method=True)
        self.DeleteMessages = channel.unary_unary(
                '/distributed_chat.ChatService/DeleteMessages',
                request_serializer=distributed__chat__pb2.DeleteMessageRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.Response.FromString,
                _registered_method=True)
        self.MarkAsRead = channel.unary_unary(
                '/distributed_chat.ChatService/MarkAsRead',
                request_serializer=distributed__chat__pb2.MarkAsReadRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.Response.FromString,
                _registered_method=True)
        self.StreamMessages = channel.unary_stream(
                '/distributed_chat.ChatService/StreamMessages',
<<<<<<< Updated upstream
                request_serializer=distributed__chat_dot_distributed__chat__pb2.Username.SerializeToString,
                response_deserializer=distributed__chat_dot_distributed__chat__pb2.Message.FromString,
=======
                request_serializer=distributed__chat__pb2.UserCredentials.SerializeToString,
                response_deserializer=distributed__chat__pb2.Response.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/distributed_chat.ChatService/Login',
                request_serializer=distributed__chat__pb2.UserCredentials.SerializeToString,
                response_deserializer=distributed__chat__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/distributed_chat.ChatService/Logout',
                request_serializer=distributed__chat__pb2.Username.SerializeToString,
                response_deserializer=distributed__chat__pb2.Response.FromString,
                _registered_method=True)
        self.DeleteAccount = channel.unary_unary(
                '/distributed_chat.ChatService/DeleteAccount',
                request_serializer=distributed__chat__pb2.Username.SerializeToString,
                response_deserializer=distributed__chat__pb2.Response.FromString,
                _registered_method=True)
        self.ListAccounts = channel.unary_unary(
                '/distributed_chat.ChatService/ListAccounts',
                request_serializer=distributed__chat__pb2.AccountListRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.AccountListResponse.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/distributed_chat.ChatService/SendMessage',
                request_serializer=distributed__chat__pb2.Message.SerializeToString,
                response_deserializer=distributed__chat__pb2.Response.FromString,
                _registered_method=True)
        self.GetMessages = channel.unary_unary(
                '/distributed_chat.ChatService/GetMessages',
                request_serializer=distributed__chat__pb2.MessageRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.MessageList.FromString,
                _registered_method=True)
        self.DeleteMessages = channel.unary_unary(
                '/distributed_chat.ChatService/DeleteMessages',
                request_serializer=distributed__chat__pb2.DeleteMessageRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.Response.FromString,
                _registered_method=True)
        self.MarkAsRead = channel.unary_unary(
                '/distributed_chat.ChatService/MarkAsRead',
                request_serializer=distributed__chat__pb2.MarkAsReadRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.Response.FromString,
                _registered_method=True)
        self.StreamMessages = channel.unary_stream(
                '/distributed_chat.ChatService/StreamMessages',
                request_serializer=distributed__chat__pb2.Username.SerializeToString,
                response_deserializer=distributed__chat__pb2.Message.FromString,
>>>>>>> Stashed changes
=======
                request_serializer=distributed__chat__pb2.Username.SerializeToString,
                response_deserializer=distributed__chat__pb2.Message.FromString,
>>>>>>> Stashed changes
                _registered_method=True)


class ChatServiceServicer(object):
    """The main service interface for client interactions
    """

    def Register(self, request, context):
        """Account Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAccounts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Messaging
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkAsRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamMessages(self, request, context):
        """Real-time updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
<<<<<<< Updated upstream
<<<<<<< Updated upstream
                    request_deserializer=distributed__chat_dot_distributed__chat__pb2.UserCredentials.FromString,
                    response_serializer=distributed__chat_dot_distributed__chat__pb2.Response.SerializeToString,
=======
                    request_deserializer=distributed__chat__pb2.UserCredentials.FromString,
                    response_serializer=distributed__chat__pb2.Response.SerializeToString,
>>>>>>> Stashed changes
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=distributed__chat__pb2.UserCredentials.FromString,
                    response_serializer=distributed__chat__pb2.LoginResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=distributed__chat__pb2.Username.FromString,
                    response_serializer=distributed__chat__pb2.Response.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=distributed__chat__pb2.Username.FromString,
                    response_serializer=distributed__chat__pb2.Response.SerializeToString,
            ),
            'ListAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccounts,
                    request_deserializer=distributed__chat__pb2.AccountListRequest.FromString,
                    response_serializer=distributed__chat__pb2.AccountListResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=distributed__chat__pb2.Message.FromString,
                    response_serializer=distributed__chat__pb2.Response.SerializeToString,
            ),
            'GetMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMessages,
                    request_deserializer=distributed__chat__pb2.MessageRequest.FromString,
                    response_serializer=distributed__chat__pb2.MessageList.SerializeToString,
            ),
            'DeleteMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMessages,
                    request_deserializer=distributed__chat__pb2.DeleteMessageRequest.FromString,
                    response_serializer=distributed__chat__pb2.Response.SerializeToString,
            ),
            'MarkAsRead': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkAsRead,
                    request_deserializer=distributed__chat__pb2.MarkAsReadRequest.FromString,
                    response_serializer=distributed__chat__pb2.Response.SerializeToString,
            ),
            'StreamMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamMessages,
<<<<<<< Updated upstream
                    request_deserializer=distributed__chat_dot_distributed__chat__pb2.Username.FromString,
                    response_serializer=distributed__chat_dot_distributed__chat__pb2.Message.SerializeToString,
=======
                    request_deserializer=distributed__chat__pb2.UserCredentials.FromString,
                    response_serializer=distributed__chat__pb2.Response.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=distributed__chat__pb2.UserCredentials.FromString,
                    response_serializer=distributed__chat__pb2.LoginResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=distributed__chat__pb2.Username.FromString,
                    response_serializer=distributed__chat__pb2.Response.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=distributed__chat__pb2.Username.FromString,
                    response_serializer=distributed__chat__pb2.Response.SerializeToString,
            ),
            'ListAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccounts,
                    request_deserializer=distributed__chat__pb2.AccountListRequest.FromString,
                    response_serializer=distributed__chat__pb2.AccountListResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=distributed__chat__pb2.Message.FromString,
                    response_serializer=distributed__chat__pb2.Response.SerializeToString,
            ),
            'GetMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMessages,
                    request_deserializer=distributed__chat__pb2.MessageRequest.FromString,
                    response_serializer=distributed__chat__pb2.MessageList.SerializeToString,
            ),
            'DeleteMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMessages,
                    request_deserializer=distributed__chat__pb2.DeleteMessageRequest.FromString,
                    response_serializer=distributed__chat__pb2.Response.SerializeToString,
            ),
            'MarkAsRead': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkAsRead,
                    request_deserializer=distributed__chat__pb2.MarkAsReadRequest.FromString,
                    response_serializer=distributed__chat__pb2.Response.SerializeToString,
            ),
            'StreamMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamMessages,
                    request_deserializer=distributed__chat__pb2.Username.FromString,
                    response_serializer=distributed__chat__pb2.Message.SerializeToString,
>>>>>>> Stashed changes
=======
                    request_deserializer=distributed__chat__pb2.Username.FromString,
                    response_serializer=distributed__chat__pb2.Message.SerializeToString,
>>>>>>> Stashed changes
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'distributed_chat.ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('distributed_chat.ChatService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """The main service interface for client interactions
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ChatService/Register',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.UserCredentials.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.Response.FromString,
=======
            distributed__chat__pb2.UserCredentials.SerializeToString,
            distributed__chat__pb2.Response.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.UserCredentials.SerializeToString,
            distributed__chat__pb2.Response.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ChatService/Login',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.UserCredentials.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.LoginResponse.FromString,
=======
            distributed__chat__pb2.UserCredentials.SerializeToString,
            distributed__chat__pb2.LoginResponse.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.UserCredentials.SerializeToString,
            distributed__chat__pb2.LoginResponse.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ChatService/Logout',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.Username.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.Response.FromString,
=======
            distributed__chat__pb2.Username.SerializeToString,
            distributed__chat__pb2.Response.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.Username.SerializeToString,
            distributed__chat__pb2.Response.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ChatService/DeleteAccount',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.Username.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.Response.FromString,
=======
            distributed__chat__pb2.Username.SerializeToString,
            distributed__chat__pb2.Response.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.Username.SerializeToString,
            distributed__chat__pb2.Response.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ChatService/ListAccounts',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.AccountListRequest.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.AccountListResponse.FromString,
=======
            distributed__chat__pb2.AccountListRequest.SerializeToString,
            distributed__chat__pb2.AccountListResponse.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.AccountListRequest.SerializeToString,
            distributed__chat__pb2.AccountListResponse.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ChatService/SendMessage',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.Message.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.Response.FromString,
=======
            distributed__chat__pb2.Message.SerializeToString,
            distributed__chat__pb2.Response.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.Message.SerializeToString,
            distributed__chat__pb2.Response.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ChatService/GetMessages',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.MessageRequest.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.MessageList.FromString,
=======
            distributed__chat__pb2.MessageRequest.SerializeToString,
            distributed__chat__pb2.MessageList.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.MessageRequest.SerializeToString,
            distributed__chat__pb2.MessageList.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ChatService/DeleteMessages',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.DeleteMessageRequest.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.Response.FromString,
=======
            distributed__chat__pb2.DeleteMessageRequest.SerializeToString,
            distributed__chat__pb2.Response.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.DeleteMessageRequest.SerializeToString,
            distributed__chat__pb2.Response.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MarkAsRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ChatService/MarkAsRead',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.MarkAsReadRequest.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.Response.FromString,
=======
            distributed__chat__pb2.MarkAsReadRequest.SerializeToString,
            distributed__chat__pb2.Response.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.MarkAsReadRequest.SerializeToString,
            distributed__chat__pb2.Response.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/distributed_chat.ChatService/StreamMessages',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.Username.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.Message.FromString,
=======
            distributed__chat__pb2.Username.SerializeToString,
            distributed__chat__pb2.Message.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.Username.SerializeToString,
            distributed__chat__pb2.Message.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ReplicationServiceStub(object):
    """Service interface for server-to-server replication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestVote = channel.unary_unary(
                '/distributed_chat.ReplicationService/RequestVote',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
                request_serializer=distributed__chat_dot_distributed__chat__pb2.VoteRequest.SerializeToString,
                response_deserializer=distributed__chat_dot_distributed__chat__pb2.VoteResponse.FromString,
=======
                request_serializer=distributed__chat__pb2.VoteRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.VoteResponse.FromString,
>>>>>>> Stashed changes
                _registered_method=True)
        self.AppendEntries = channel.unary_unary(
                '/distributed_chat.ReplicationService/AppendEntries',
                request_serializer=distributed__chat__pb2.AppendEntriesRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.AppendEntriesResponse.FromString,
                _registered_method=True)
        self.SyncData = channel.unary_unary(
                '/distributed_chat.ReplicationService/SyncData',
                request_serializer=distributed__chat__pb2.SyncRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.SyncResponse.FromString,
                _registered_method=True)
        self.GetState = channel.unary_unary(
                '/distributed_chat.ReplicationService/GetState',
                request_serializer=distributed__chat__pb2.GetStateRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.StateResponse.FromString,
                _registered_method=True)
        self.AddServer = channel.unary_unary(
                '/distributed_chat.ReplicationService/AddServer',
                request_serializer=distributed__chat__pb2.AddServerRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.AddServerResponse.FromString,
                _registered_method=True)
        self.CatchupServer = channel.unary_unary(
                '/distributed_chat.ReplicationService/CatchupServer',
                request_serializer=distributed__chat__pb2.CatchupRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.CatchupResponse.FromString,
                _registered_method=True)
        self.PromoteServer = channel.unary_unary(
                '/distributed_chat.ReplicationService/PromoteServer',
                request_serializer=distributed__chat__pb2.PromoteServerRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.PromoteServerResponse.FromString,
                _registered_method=True)
        self.AddServer = channel.unary_unary(
                '/distributed_chat.ReplicationService/AddServer',
                request_serializer=distributed__chat_dot_distributed__chat__pb2.AddServerRequest.SerializeToString,
                response_deserializer=distributed__chat_dot_distributed__chat__pb2.AddServerResponse.FromString,
                _registered_method=True)
        self.CatchupServer = channel.unary_unary(
                '/distributed_chat.ReplicationService/CatchupServer',
                request_serializer=distributed__chat_dot_distributed__chat__pb2.CatchupRequest.SerializeToString,
                response_deserializer=distributed__chat_dot_distributed__chat__pb2.CatchupResponse.FromString,
                _registered_method=True)
        self.PromoteServer = channel.unary_unary(
                '/distributed_chat.ReplicationService/PromoteServer',
                request_serializer=distributed__chat_dot_distributed__chat__pb2.PromoteServerRequest.SerializeToString,
                response_deserializer=distributed__chat_dot_distributed__chat__pb2.PromoteServerResponse.FromString,
=======
                request_serializer=distributed__chat__pb2.VoteRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.VoteResponse.FromString,
                _registered_method=True)
        self.AppendEntries = channel.unary_unary(
                '/distributed_chat.ReplicationService/AppendEntries',
                request_serializer=distributed__chat__pb2.AppendEntriesRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.AppendEntriesResponse.FromString,
                _registered_method=True)
        self.SyncData = channel.unary_unary(
                '/distributed_chat.ReplicationService/SyncData',
                request_serializer=distributed__chat__pb2.SyncRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.SyncResponse.FromString,
                _registered_method=True)
        self.GetState = channel.unary_unary(
                '/distributed_chat.ReplicationService/GetState',
                request_serializer=distributed__chat__pb2.GetStateRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.StateResponse.FromString,
                _registered_method=True)
        self.AddServer = channel.unary_unary(
                '/distributed_chat.ReplicationService/AddServer',
                request_serializer=distributed__chat__pb2.AddServerRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.AddServerResponse.FromString,
                _registered_method=True)
        self.CatchupServer = channel.unary_unary(
                '/distributed_chat.ReplicationService/CatchupServer',
                request_serializer=distributed__chat__pb2.CatchupRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.CatchupResponse.FromString,
                _registered_method=True)
        self.PromoteServer = channel.unary_unary(
                '/distributed_chat.ReplicationService/PromoteServer',
                request_serializer=distributed__chat__pb2.PromoteServerRequest.SerializeToString,
                response_deserializer=distributed__chat__pb2.PromoteServerResponse.FromString,
>>>>>>> Stashed changes
                _registered_method=True)


class ReplicationServiceServicer(object):
    """Service interface for server-to-server replication
    """

    def RequestVote(self, request, context):
        """Leader election related endpoints
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncData(self, request, context):
        """Data replication
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddServer(self, request, context):
        """Dynamic membership changes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CatchupServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PromoteServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplicationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
<<<<<<< Updated upstream
<<<<<<< Updated upstream
                    request_deserializer=distributed__chat_dot_distributed__chat__pb2.VoteRequest.FromString,
                    response_serializer=distributed__chat_dot_distributed__chat__pb2.VoteResponse.SerializeToString,
=======
                    request_deserializer=distributed__chat__pb2.VoteRequest.FromString,
                    response_serializer=distributed__chat__pb2.VoteResponse.SerializeToString,
>>>>>>> Stashed changes
            ),
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=distributed__chat__pb2.AppendEntriesRequest.FromString,
                    response_serializer=distributed__chat__pb2.AppendEntriesResponse.SerializeToString,
            ),
            'SyncData': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncData,
                    request_deserializer=distributed__chat__pb2.SyncRequest.FromString,
                    response_serializer=distributed__chat__pb2.SyncResponse.SerializeToString,
            ),
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=distributed__chat__pb2.GetStateRequest.FromString,
                    response_serializer=distributed__chat__pb2.StateResponse.SerializeToString,
            ),
            'AddServer': grpc.unary_unary_rpc_method_handler(
                    servicer.AddServer,
                    request_deserializer=distributed__chat__pb2.AddServerRequest.FromString,
                    response_serializer=distributed__chat__pb2.AddServerResponse.SerializeToString,
            ),
            'CatchupServer': grpc.unary_unary_rpc_method_handler(
                    servicer.CatchupServer,
                    request_deserializer=distributed__chat__pb2.CatchupRequest.FromString,
                    response_serializer=distributed__chat__pb2.CatchupResponse.SerializeToString,
            ),
            'PromoteServer': grpc.unary_unary_rpc_method_handler(
                    servicer.PromoteServer,
                    request_deserializer=distributed__chat__pb2.PromoteServerRequest.FromString,
                    response_serializer=distributed__chat__pb2.PromoteServerResponse.SerializeToString,
            ),
            'AddServer': grpc.unary_unary_rpc_method_handler(
                    servicer.AddServer,
                    request_deserializer=distributed__chat_dot_distributed__chat__pb2.AddServerRequest.FromString,
                    response_serializer=distributed__chat_dot_distributed__chat__pb2.AddServerResponse.SerializeToString,
            ),
            'CatchupServer': grpc.unary_unary_rpc_method_handler(
                    servicer.CatchupServer,
                    request_deserializer=distributed__chat_dot_distributed__chat__pb2.CatchupRequest.FromString,
                    response_serializer=distributed__chat_dot_distributed__chat__pb2.CatchupResponse.SerializeToString,
            ),
            'PromoteServer': grpc.unary_unary_rpc_method_handler(
                    servicer.PromoteServer,
                    request_deserializer=distributed__chat_dot_distributed__chat__pb2.PromoteServerRequest.FromString,
                    response_serializer=distributed__chat_dot_distributed__chat__pb2.PromoteServerResponse.SerializeToString,
=======
                    request_deserializer=distributed__chat__pb2.VoteRequest.FromString,
                    response_serializer=distributed__chat__pb2.VoteResponse.SerializeToString,
            ),
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=distributed__chat__pb2.AppendEntriesRequest.FromString,
                    response_serializer=distributed__chat__pb2.AppendEntriesResponse.SerializeToString,
            ),
            'SyncData': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncData,
                    request_deserializer=distributed__chat__pb2.SyncRequest.FromString,
                    response_serializer=distributed__chat__pb2.SyncResponse.SerializeToString,
            ),
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=distributed__chat__pb2.GetStateRequest.FromString,
                    response_serializer=distributed__chat__pb2.StateResponse.SerializeToString,
            ),
            'AddServer': grpc.unary_unary_rpc_method_handler(
                    servicer.AddServer,
                    request_deserializer=distributed__chat__pb2.AddServerRequest.FromString,
                    response_serializer=distributed__chat__pb2.AddServerResponse.SerializeToString,
            ),
            'CatchupServer': grpc.unary_unary_rpc_method_handler(
                    servicer.CatchupServer,
                    request_deserializer=distributed__chat__pb2.CatchupRequest.FromString,
                    response_serializer=distributed__chat__pb2.CatchupResponse.SerializeToString,
            ),
            'PromoteServer': grpc.unary_unary_rpc_method_handler(
                    servicer.PromoteServer,
                    request_deserializer=distributed__chat__pb2.PromoteServerRequest.FromString,
                    response_serializer=distributed__chat__pb2.PromoteServerResponse.SerializeToString,
>>>>>>> Stashed changes
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'distributed_chat.ReplicationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('distributed_chat.ReplicationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ReplicationService(object):
    """Service interface for server-to-server replication
    """

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ReplicationService/RequestVote',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.VoteRequest.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.VoteResponse.FromString,
=======
            distributed__chat__pb2.VoteRequest.SerializeToString,
            distributed__chat__pb2.VoteResponse.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.VoteRequest.SerializeToString,
            distributed__chat__pb2.VoteResponse.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AppendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ReplicationService/AppendEntries',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.AppendEntriesRequest.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.AppendEntriesResponse.FromString,
=======
            distributed__chat__pb2.AppendEntriesRequest.SerializeToString,
            distributed__chat__pb2.AppendEntriesResponse.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.AppendEntriesRequest.SerializeToString,
            distributed__chat__pb2.AppendEntriesResponse.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SyncData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ReplicationService/SyncData',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.SyncRequest.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.SyncResponse.FromString,
=======
            distributed__chat__pb2.SyncRequest.SerializeToString,
            distributed__chat__pb2.SyncResponse.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.SyncRequest.SerializeToString,
            distributed__chat__pb2.SyncResponse.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ReplicationService/GetState',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.GetStateRequest.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.StateResponse.FromString,
=======
            distributed__chat__pb2.GetStateRequest.SerializeToString,
            distributed__chat__pb2.StateResponse.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.GetStateRequest.SerializeToString,
            distributed__chat__pb2.StateResponse.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ReplicationService/AddServer',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.AddServerRequest.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.AddServerResponse.FromString,
=======
            distributed__chat__pb2.AddServerRequest.SerializeToString,
            distributed__chat__pb2.AddServerResponse.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.AddServerRequest.SerializeToString,
            distributed__chat__pb2.AddServerResponse.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CatchupServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ReplicationService/CatchupServer',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.CatchupRequest.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.CatchupResponse.FromString,
=======
            distributed__chat__pb2.CatchupRequest.SerializeToString,
            distributed__chat__pb2.CatchupResponse.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.CatchupRequest.SerializeToString,
            distributed__chat__pb2.CatchupResponse.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PromoteServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_chat.ReplicationService/PromoteServer',
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            distributed__chat_dot_distributed__chat__pb2.PromoteServerRequest.SerializeToString,
            distributed__chat_dot_distributed__chat__pb2.PromoteServerResponse.FromString,
=======
            distributed__chat__pb2.PromoteServerRequest.SerializeToString,
            distributed__chat__pb2.PromoteServerResponse.FromString,
>>>>>>> Stashed changes
=======
            distributed__chat__pb2.PromoteServerRequest.SerializeToString,
            distributed__chat__pb2.PromoteServerResponse.FromString,
>>>>>>> Stashed changes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
