syntax = "proto3";

package chat;

// Chat service definition
service ChatService {
  // User account management
  rpc Register (UserAuth) returns (Response);
  rpc Login (UserAuth) returns (LoginResponse);
  rpc Logout (UserRequest) returns (Response);
  rpc DeleteAccount (UserRequest) returns (Response);
  rpc ListAccounts (AccountQuery) returns (AccountListResponse);

  // Message operations
  rpc SendMessage (Message) returns (Response);
  rpc GetMessages (MessageQuery) returns (MessageList);
  rpc DeleteMessages (MessageDeleteRequest) returns (Response);
  rpc MarkAsRead (MessageReadRequest) returns (Response);
  rpc StreamMessages (UserRequest) returns (stream Message);
}

// Raft consensus service for server replication
service RaftService {
  // Core Raft RPCs
  rpc RequestVote (VoteRequest) returns (VoteResponse);
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse);
  
  // Server management
  rpc JoinCluster (JoinRequest) returns (Response);
  rpc GetClusterStatus (ClusterStatusRequest) returns (ClusterStatusResponse);
  
  // Log transfer for new servers or lagging replicas
  rpc TransferSnapshot (SnapshotRequest) returns (stream SnapshotChunk);
}

// User authentication
message UserAuth {
  string username = 1;
  string password = 2;
}

// General user request with just a username
message UserRequest {
  string username = 1;
}

// Standard response format
message Response {
  bool success = 1;
  string message = 2;
}

// Login-specific response with unread count
message LoginResponse {
  bool success = 1;
  string message = 2;
  int32 unread_count = 3;
  string server_id = 4;  // Identify which server handled request
}

// Account query parameters
message AccountQuery {
  string pattern = 1;  // Optional pattern to filter usernames
  int32 page = 2;      // Pagination: page number
  int32 per_page = 3;  // Pagination: items per page
}

// Account information
message Account {
  string username = 1;
  string created_at = 2;
  string last_login = 3;
}

// List of accounts
message AccountListResponse {
  repeated Account accounts = 1;
  int32 page = 2;
  int32 per_page = 3;
}

// Chat message format
message Message {
  int64 id = 1;
  string sender = 2;
  string recipient = 3;
  string content = 4;
  string timestamp = 5;
  bool read = 6;
  int64 sequence_number = 7;  // For log ordering
}

// Message query parameters
message MessageQuery {
  string username = 1;
  int32 count = 2;     // Number of messages to retrieve
}

// Request to delete messages
message MessageDeleteRequest {
  string username = 1;
  repeated int64 message_ids = 2;
}

// Request to mark messages as read
message MessageReadRequest {
  string username = 1;
  repeated int64 message_ids = 2;
}

// List of messages
message MessageList {
  repeated Message messages = 1;
}

// Log entry for Raft consensus
message LogEntry {
  int64 term = 1;
  int64 index = 2;
  oneof command {
    Message message_command = 3;
    UserAuth user_auth_command = 4;
    UserRequest user_command = 5;
    MessageDeleteRequest delete_command = 6;
    MessageReadRequest read_command = 7;
  }
}

// Request vote RPC parameters
message VoteRequest {
  int64 term = 1;
  string candidate_id = 2;
  int64 last_log_index = 3;
  int64 last_log_term = 4;
}

// Vote response
message VoteResponse {
  int64 term = 1;
  bool vote_granted = 2;
}

// Append entries (heartbeat) RPC parameters
message AppendEntriesRequest {
  int64 term = 1;
  string leader_id = 2;
  int64 prev_log_index = 3;
  int64 prev_log_term = 4;
  repeated LogEntry entries = 5;
  int64 leader_commit = 6;
}

// Append entries response
message AppendEntriesResponse {
  int64 term = 1;
  bool success = 2;
  int64 match_index = 3;  // For faster log backfilling
}

// Join cluster request from a new server
message JoinRequest {
  string server_id = 1;
  string server_address = 2;
}

// Cluster status request
message ClusterStatusRequest {
  string server_id = 1;
}

// Cluster member information
message ClusterMember {
  string id = 1;
  string address = 2;
  string state = 3;  // "leader", "follower", "candidate", or "down"
  int64 last_seen = 4;
}

// Cluster status response
message ClusterStatusResponse {
  string leader_id = 1;
  int64 current_term = 2;
  repeated ClusterMember members = 3;
}

// Request to obtain a snapshot for state synchronization
message SnapshotRequest {
  string server_id = 1;
  int64 last_included_index = 2;
}

// Chunk of a snapshot for state transfer
message SnapshotChunk {
  int64 offset = 1;
  bytes data = 2;
  bool done = 3;
  int64 last_included_index = 4;
  int64 last_included_term = 5;
}
