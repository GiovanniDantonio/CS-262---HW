# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from proto import chat_pb2 as proto_dot_chat__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in proto/chat_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ChatServiceStub(object):
    """Chat service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/chat.ChatService/Register',
                request_serializer=proto_dot_chat__pb2.UserAuth.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.Response.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/chat.ChatService/Login',
                request_serializer=proto_dot_chat__pb2.UserAuth.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/chat.ChatService/Logout',
                request_serializer=proto_dot_chat__pb2.UserRequest.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.Response.FromString,
                _registered_method=True)
        self.DeleteAccount = channel.unary_unary(
                '/chat.ChatService/DeleteAccount',
                request_serializer=proto_dot_chat__pb2.UserRequest.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.Response.FromString,
                _registered_method=True)
        self.ListAccounts = channel.unary_unary(
                '/chat.ChatService/ListAccounts',
                request_serializer=proto_dot_chat__pb2.AccountQuery.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.AccountListResponse.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/chat.ChatService/SendMessage',
                request_serializer=proto_dot_chat__pb2.Message.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.Response.FromString,
                _registered_method=True)
        self.GetMessages = channel.unary_unary(
                '/chat.ChatService/GetMessages',
                request_serializer=proto_dot_chat__pb2.MessageQuery.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.MessageList.FromString,
                _registered_method=True)
        self.DeleteMessages = channel.unary_unary(
                '/chat.ChatService/DeleteMessages',
                request_serializer=proto_dot_chat__pb2.MessageDeleteRequest.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.Response.FromString,
                _registered_method=True)
        self.MarkAsRead = channel.unary_unary(
                '/chat.ChatService/MarkAsRead',
                request_serializer=proto_dot_chat__pb2.MessageReadRequest.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.Response.FromString,
                _registered_method=True)
        self.StreamMessages = channel.unary_stream(
                '/chat.ChatService/StreamMessages',
                request_serializer=proto_dot_chat__pb2.UserRequest.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.Message.FromString,
                _registered_method=True)


class ChatServiceServicer(object):
    """Chat service definition
    """

    def Register(self, request, context):
        """User account management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAccounts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Message operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkAsRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=proto_dot_chat__pb2.UserAuth.FromString,
                    response_serializer=proto_dot_chat__pb2.Response.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=proto_dot_chat__pb2.UserAuth.FromString,
                    response_serializer=proto_dot_chat__pb2.LoginResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=proto_dot_chat__pb2.UserRequest.FromString,
                    response_serializer=proto_dot_chat__pb2.Response.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=proto_dot_chat__pb2.UserRequest.FromString,
                    response_serializer=proto_dot_chat__pb2.Response.SerializeToString,
            ),
            'ListAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccounts,
                    request_deserializer=proto_dot_chat__pb2.AccountQuery.FromString,
                    response_serializer=proto_dot_chat__pb2.AccountListResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=proto_dot_chat__pb2.Message.FromString,
                    response_serializer=proto_dot_chat__pb2.Response.SerializeToString,
            ),
            'GetMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMessages,
                    request_deserializer=proto_dot_chat__pb2.MessageQuery.FromString,
                    response_serializer=proto_dot_chat__pb2.MessageList.SerializeToString,
            ),
            'DeleteMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMessages,
                    request_deserializer=proto_dot_chat__pb2.MessageDeleteRequest.FromString,
                    response_serializer=proto_dot_chat__pb2.Response.SerializeToString,
            ),
            'MarkAsRead': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkAsRead,
                    request_deserializer=proto_dot_chat__pb2.MessageReadRequest.FromString,
                    response_serializer=proto_dot_chat__pb2.Response.SerializeToString,
            ),
            'StreamMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamMessages,
                    request_deserializer=proto_dot_chat__pb2.UserRequest.FromString,
                    response_serializer=proto_dot_chat__pb2.Message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chat.ChatService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """Chat service definition
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/Register',
            proto_dot_chat__pb2.UserAuth.SerializeToString,
            proto_dot_chat__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/Login',
            proto_dot_chat__pb2.UserAuth.SerializeToString,
            proto_dot_chat__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/Logout',
            proto_dot_chat__pb2.UserRequest.SerializeToString,
            proto_dot_chat__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/DeleteAccount',
            proto_dot_chat__pb2.UserRequest.SerializeToString,
            proto_dot_chat__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/ListAccounts',
            proto_dot_chat__pb2.AccountQuery.SerializeToString,
            proto_dot_chat__pb2.AccountListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/SendMessage',
            proto_dot_chat__pb2.Message.SerializeToString,
            proto_dot_chat__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/GetMessages',
            proto_dot_chat__pb2.MessageQuery.SerializeToString,
            proto_dot_chat__pb2.MessageList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/DeleteMessages',
            proto_dot_chat__pb2.MessageDeleteRequest.SerializeToString,
            proto_dot_chat__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MarkAsRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/MarkAsRead',
            proto_dot_chat__pb2.MessageReadRequest.SerializeToString,
            proto_dot_chat__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/chat.ChatService/StreamMessages',
            proto_dot_chat__pb2.UserRequest.SerializeToString,
            proto_dot_chat__pb2.Message.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RaftServiceStub(object):
    """Raft consensus service for server replication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestVote = channel.unary_unary(
                '/chat.RaftService/RequestVote',
                request_serializer=proto_dot_chat__pb2.VoteRequest.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.VoteResponse.FromString,
                _registered_method=True)
        self.AppendEntries = channel.unary_unary(
                '/chat.RaftService/AppendEntries',
                request_serializer=proto_dot_chat__pb2.AppendEntriesRequest.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.AppendEntriesResponse.FromString,
                _registered_method=True)
        self.JoinCluster = channel.unary_unary(
                '/chat.RaftService/JoinCluster',
                request_serializer=proto_dot_chat__pb2.JoinRequest.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.Response.FromString,
                _registered_method=True)
        self.GetClusterStatus = channel.unary_unary(
                '/chat.RaftService/GetClusterStatus',
                request_serializer=proto_dot_chat__pb2.ClusterStatusRequest.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.ClusterStatusResponse.FromString,
                _registered_method=True)
        self.TransferSnapshot = channel.unary_stream(
                '/chat.RaftService/TransferSnapshot',
                request_serializer=proto_dot_chat__pb2.SnapshotRequest.SerializeToString,
                response_deserializer=proto_dot_chat__pb2.SnapshotChunk.FromString,
                _registered_method=True)


class RaftServiceServicer(object):
    """Raft consensus service for server replication
    """

    def RequestVote(self, request, context):
        """Core Raft RPCs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinCluster(self, request, context):
        """Server management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClusterStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferSnapshot(self, request, context):
        """Log transfer for new servers or lagging replicas
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RaftServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=proto_dot_chat__pb2.VoteRequest.FromString,
                    response_serializer=proto_dot_chat__pb2.VoteResponse.SerializeToString,
            ),
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=proto_dot_chat__pb2.AppendEntriesRequest.FromString,
                    response_serializer=proto_dot_chat__pb2.AppendEntriesResponse.SerializeToString,
            ),
            'JoinCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinCluster,
                    request_deserializer=proto_dot_chat__pb2.JoinRequest.FromString,
                    response_serializer=proto_dot_chat__pb2.Response.SerializeToString,
            ),
            'GetClusterStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterStatus,
                    request_deserializer=proto_dot_chat__pb2.ClusterStatusRequest.FromString,
                    response_serializer=proto_dot_chat__pb2.ClusterStatusResponse.SerializeToString,
            ),
            'TransferSnapshot': grpc.unary_stream_rpc_method_handler(
                    servicer.TransferSnapshot,
                    request_deserializer=proto_dot_chat__pb2.SnapshotRequest.FromString,
                    response_serializer=proto_dot_chat__pb2.SnapshotChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.RaftService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chat.RaftService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RaftService(object):
    """Raft consensus service for server replication
    """

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.RaftService/RequestVote',
            proto_dot_chat__pb2.VoteRequest.SerializeToString,
            proto_dot_chat__pb2.VoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AppendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.RaftService/AppendEntries',
            proto_dot_chat__pb2.AppendEntriesRequest.SerializeToString,
            proto_dot_chat__pb2.AppendEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def JoinCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.RaftService/JoinCluster',
            proto_dot_chat__pb2.JoinRequest.SerializeToString,
            proto_dot_chat__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetClusterStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.RaftService/GetClusterStatus',
            proto_dot_chat__pb2.ClusterStatusRequest.SerializeToString,
            proto_dot_chat__pb2.ClusterStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransferSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/chat.RaftService/TransferSnapshot',
            proto_dot_chat__pb2.SnapshotRequest.SerializeToString,
            proto_dot_chat__pb2.SnapshotChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
