syntax = "proto3";

package chat;

// Service definition for the Chat application.
service ChatService {
    // User authentication and account management.
    rpc Register(UserCredentials) returns (Response);
    rpc Login(UserCredentials) returns (LoginResponse);
    rpc Logout(UserRequest) returns (Response);
    rpc DeleteAccount(UserRequest) returns (Response);
    rpc ListAccounts(AccountListRequest) returns (AccountListResponse);

    // Messaging.
    rpc SendMessage(Message) returns (Response);
    rpc GetMessages(MessageRequest) returns (MessageList);
    rpc DeleteMessages(DeleteMessagesRequest) returns (Response);
    rpc MarkAsRead(MarkAsReadRequest) returns (Response);

    // Real-time message streaming.
    // This RPC streams messages to the client automatically.
    rpc StreamMessages(UserRequest) returns (stream ServerUpdate);
}

// Messages for user authentication.
message UserCredentials {
    string username = 1;
    string password = 2;
}

// A simple user request containing a username.
message UserRequest {
    string username = 1;
}

// A generic response message.
message Response {
    bool success = 1;
    string message = 2;
}

// Login response message with an unread message count.
message LoginResponse {
    bool success = 1;
    string message = 2;
    int32 unread_count = 3;
}

// Structure for a chat message.
message Message {
    int32 id = 1;
    string sender = 2;
    string recipient = 3;
    string content = 4;
    string timestamp = 5;
    bool read = 6;
}

// Request for fetching a list of messages.
message MessageRequest {
    string username = 1;
    int32 count = 2;
}

// Response containing a list of messages.
message MessageList {
    repeated Message messages = 1;
}

// Request for deleting messages.
message DeleteMessagesRequest {
    string username = 1;
    repeated int32 message_ids = 2;
}

// Request for marking messages as read.
message MarkAsReadRequest {
    string username = 1;
    repeated int32 message_ids = 2;
}

// Request for listing accounts.
message AccountListRequest {
    string pattern = 1;
    int32 page = 2;
    int32 per_page = 3;
}

// Account representation.
message Account {
    string username = 1;
    string created_at = 2;
    string last_login = 3;
}

// Response containing a list of accounts.
message AccountListResponse {
    repeated Account accounts = 1;
    int32 page = 2;
    int32 per_page = 3;
}

// Server update message.
message ServerUpdate {
    oneof update {
        Message new_message = 1;
        LeaderUpdate leader_change = 2;
    }
}

// Leader update message.
message LeaderUpdate {
    string new_leader_address = 1;
}
